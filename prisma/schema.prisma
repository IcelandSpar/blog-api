// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Blogs {
  id              String            @id @default(uuid())
  title           String            @db.VarChar(255)
  content         String            @db.VarChar(500)
  createdAt       DateTime          @default(now())
  modifiedAt      DateTime          @updatedAt
  published       Boolean           @default(false)
  // likes           Int               @default(0)
  // dislikes        Int               @default(0)
  author          Authors           @relation(fields: [authorId], references: [id])
  authorId        String
  Comments        Comments[]
  UsersLikedBlogs UsersLikedBlogs[]
}

model Comments {
  id           String   @id @default(uuid())
  commentTitle String   @db.VarChar(255)
  comment      String   @db.VarChar(255)
  createdAt    DateTime @default(now())
  modifiedAt   DateTime @updatedAt
  likes        Int      @default(0)
  dislikes     Int      @default(0)
  authorHeart  Boolean  @default(false)

  user                  Users                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String
  blogs                 Blogs                   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId                String
  UserLikedComments     UserLikedComments[]
  authorHeartedComments authorHeartedComments[]
}

model Authors {
  id String @id @default(uuid())

  Blogs                 Blogs[]
  user                  Users                   @relation(fields: [userId], references: [id])
  userId                String
  authorHeartedComments authorHeartedComments[]
}

model Users {
  id                String              @id @default(uuid())
  username          String
  password          String
  Authors           Authors[]
  Comments          Comments[]
  UserLikedComments UserLikedComments[]
  UsersLikedBlogs   UsersLikedBlogs[]
}

model UserLikedComments {
  id   String  @id @default(uuid())
  like Boolean

  user      Users    @relation(fields: [userId], references: [id])
  userId    String
  comment   Comments @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
}

model authorHeartedComments {
  id String @id @default(uuid())

  comment   Comments @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  author    Authors  @relation(fields: [authorId], references: [id])
  authorId  String
}

model UsersLikedBlogs {
  id   String  @id @default(uuid())
  like Boolean

  user   Users  @relation(fields: [userId], references: [id])
  userId String
  blog   Blogs  @relation(fields: [blogId], references: [id])
  blogId String
}
